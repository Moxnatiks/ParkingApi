// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingApi.Settings;

namespace ParkingApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210913160514_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ParkingApi.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Full_name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 488, DateTimeKind.Unspecified).AddTicks(4756), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            Full_name = "John Doe",
                            Password = "fVdaszZKAHRWH9Be+fSY+qPZ70QkF/Y/eJrflxj9BxE=",
                            StoredSalt = new byte[] { 221, 136, 6, 156, 33, 157, 117, 105, 22, 203, 20, 183, 126, 90, 53, 253 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefaulte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "#116867",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "LLBRPTVQ",
                            Number = "BB7061DD",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Color = "#131b52",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "JJQNEVAV",
                            Number = "AA2712AD",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Color = "#7f6575",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "PBONKPLE",
                            Number = "BD1679AB",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Color = "#61636f",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "VUOWUOEP",
                            Number = "CD6275CA",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            Color = "#65050f",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "FWQQRWUM",
                            Number = "CD0800AB",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Color = "#7f1a12",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "RXFXUJQQ",
                            Number = "BA2837AC",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            Color = "#740177",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "VXABPUOX",
                            Number = "CA5271CA",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Color = "#105d71",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "THAFMLGX",
                            Number = "CA9521CA",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            Color = "#6c6d64",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "NDGKDMST",
                            Number = "CC7625AB",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Color = "#654971",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 614, DateTimeKind.Unspecified).AddTicks(8991), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "MOIVWVOP",
                            Number = "BA0953AB",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<long>("ParkingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Latitude = 789.45600000000002,
                            Longitude = 456.78899999999999,
                            ParkingId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Latitude = 789.45600000000002,
                            Longitude = 456.78899999999999,
                            ParkingId = 1L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Parking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<long>("SecondFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("SecondTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "There and here?",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 526, DateTimeKind.Unspecified).AddTicks(9021), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 5.4500000000000002,
                            SecondFrom = 123456L,
                            SecondTo = 654321L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CarId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("ParkingId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CarId = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 632, DateTimeKind.Unspecified).AddTicks(5102), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 13, 20, 5, 13, 632, DateTimeKind.Local).AddTicks(4546),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 13, 19, 5, 13, 632, DateTimeKind.Local).AddTicks(2848)
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("First_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Last_name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 549, DateTimeKind.Unspecified).AddTicks(8611), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "user@gmail.com",
                            First_name = "John",
                            IsAccess = true,
                            Last_name = "Doe",
                            Password = "q5T4WjHJfXF3bH2udyV7SfAO2Ttl/mTo21ByUluYP1k=",
                            Phone = "+380994444333",
                            StoredSalt = new byte[] { 22, 104, 126, 155, 88, 178, 155, 17, 32, 62, 103, 120, 169, 179, 94, 20 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Valet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Full_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Jetton")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Valets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 13, 19, 5, 13, 507, DateTimeKind.Unspecified).AddTicks(9338), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "valet@gmail.com",
                            Full_name = "Valet Doe",
                            IsAccess = true,
                            Jetton = "123456",
                            Password = "N2Dip9tVqQO9bJ/ZtvmC9OhQ4PmY3IOHICUzZWs2gjc=",
                            Phone = "+380994444333",
                            StoredSalt = new byte[] { 39, 240, 73, 131, 113, 10, 240, 133, 15, 231, 104, 154, 241, 18, 190, 13 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.HasOne("ParkingApi.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkingApi.Models.Location", b =>
                {
                    b.HasOne("ParkingApi.Models.Parking", "Parking")
                        .WithMany("Locations")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("ParkingApi.Models.Session", b =>
                {
                    b.HasOne("ParkingApi.Models.Car", "Car")
                        .WithOne("Session")
                        .HasForeignKey("ParkingApi.Models.Session", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingApi.Models.Parking", "Parking")
                        .WithMany("Sessions")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.Navigation("Session");
                });

            modelBuilder.Entity("ParkingApi.Models.Parking", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ParkingApi.Models.User", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
