// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingApi.Settings;

namespace ParkingApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210914084522_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ParkingApi.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Full_name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 836, DateTimeKind.Unspecified).AddTicks(6591), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            Full_name = "John Doe",
                            Password = "7bTTczM/7AFVoUaijA8ZzIr9aine/ZnqiKHhCHtreds=",
                            StoredSalt = new byte[] { 66, 59, 154, 42, 216, 126, 122, 108, 0, 79, 251, 115, 18, 27, 12, 155 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefaulte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "#602b14",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "XMIBUUES",
                            Number = "NE5840CK",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            Color = "#491f1a",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "LCIMCGNP",
                            Number = "QW4529WV",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Color = "#156b7e",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "MXGLRWTE",
                            Number = "TN1133HU",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Color = "#6c7066",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "HNBPRXOL",
                            Number = "BF8511GM",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            Color = "#755361",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "LJTCSGFW",
                            Number = "OC7726RX",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            Color = "#5e7b6f",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "HHCOQPBE",
                            Number = "AT0208CV",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            Color = "#221d35",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "SQVXMDFM",
                            Number = "KH5110UD",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Color = "#390f0b",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "EAVTBKQK",
                            Number = "MT2972XO",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            Color = "#680876",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "JNSRETEX",
                            Number = "WX6557GS",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Color = "#1f144d",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 981, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "KTXPCPJT",
                            Number = "BG7118QO",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<long>("ParkingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Latitude = 789.45600000000002,
                            Longitude = 456.78899999999999,
                            ParkingId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Latitude = 789.45600000000002,
                            Longitude = 456.78899999999999,
                            ParkingId = 1L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Parking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<long>("SecondFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("SecondTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 7.5722123624627535,
                            SecondFrom = 17639L,
                            SecondTo = 15889L
                        },
                        new
                        {
                            Id = 2L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 8.4012710947549305,
                            SecondFrom = 18446L,
                            SecondTo = 19965L
                        },
                        new
                        {
                            Id = 3L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 5.3966689763575184,
                            SecondFrom = 13412L,
                            SecondTo = 17260L
                        },
                        new
                        {
                            Id = 4L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 9.6393418822620731,
                            SecondFrom = 14161L,
                            SecondTo = 19332L
                        },
                        new
                        {
                            Id = 5L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 6.5656667722229223,
                            SecondFrom = 10737L,
                            SecondTo = 18698L
                        },
                        new
                        {
                            Id = 6L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 8.6058167338398359,
                            SecondFrom = 17551L,
                            SecondTo = 18411L
                        },
                        new
                        {
                            Id = 7L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 8.3811668485315352,
                            SecondFrom = 12720L,
                            SecondTo = 17749L
                        },
                        new
                        {
                            Id = 8L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 6.1416014871288098,
                            SecondFrom = 12022L,
                            SecondTo = 19409L
                        },
                        new
                        {
                            Id = 9L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 9.9844671995306697,
                            SecondFrom = 19169L,
                            SecondTo = 15358L
                        },
                        new
                        {
                            Id = 10L,
                            Address = "en",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 934, DateTimeKind.Unspecified).AddTicks(3694), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 7.5691091327784159,
                            SecondFrom = 11052L,
                            SecondTo = 18045L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CarId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("ParkingId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CarId = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 2L,
                            CarId = 2L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 2L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 3L,
                            CarId = 3L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 4L,
                            CarId = 4L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 2L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 5L,
                            CarId = 5L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 6L,
                            CarId = 6L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 2L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 7L,
                            CarId = 7L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 8L,
                            CarId = 8L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 9L,
                            CarId = 9L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 10L,
                            CarId = 10L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 14, 12, 45, 21, 993, DateTimeKind.Local).AddTicks(8279),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 14, 11, 45, 21, 993, DateTimeKind.Local).AddTicks(3362)
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("First_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Last_name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 970, DateTimeKind.Unspecified).AddTicks(3153), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "string",
                            First_name = "John",
                            IsAccess = true,
                            Last_name = "Doe",
                            Password = "0es5Z6h0OhZFHJAZPnbrYecyXZvuXDhDjvVbau2ra2E=",
                            Phone = "+380994444333",
                            StoredSalt = new byte[] { 241, 131, 49, 253, 172, 74, 73, 135, 2, 5, 23, 185, 11, 192, 70, 150 }
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 970, DateTimeKind.Unspecified).AddTicks(3232), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "user@gmail.com",
                            First_name = "Ruslan",
                            IsAccess = true,
                            Last_name = "Tonus",
                            Password = "0es5Z6h0OhZFHJAZPnbrYecyXZvuXDhDjvVbau2ra2E=",
                            Phone = "+380993334444",
                            StoredSalt = new byte[] { 241, 131, 49, 253, 172, 74, 73, 135, 2, 5, 23, 185, 11, 192, 70, 150 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Valet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Full_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Jetton")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Valets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 14, 11, 45, 21, 856, DateTimeKind.Unspecified).AddTicks(2149), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "valet@gmail.com",
                            Full_name = "Valet Doe",
                            IsAccess = true,
                            Jetton = "123456",
                            Password = "UtYB7nSKpFSuGOP2RyWpVuvjpKqHhq3vHba7EW3nPKI=",
                            Phone = "+380994444333",
                            StoredSalt = new byte[] { 242, 0, 129, 145, 253, 192, 234, 148, 33, 159, 232, 188, 110, 176, 80, 169 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.HasOne("ParkingApi.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkingApi.Models.Location", b =>
                {
                    b.HasOne("ParkingApi.Models.Parking", "Parking")
                        .WithMany("Locations")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("ParkingApi.Models.Session", b =>
                {
                    b.HasOne("ParkingApi.Models.Car", "Car")
                        .WithOne("Session")
                        .HasForeignKey("ParkingApi.Models.Session", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingApi.Models.Parking", "Parking")
                        .WithMany("Sessions")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.Navigation("Session");
                });

            modelBuilder.Entity("ParkingApi.Models.Parking", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ParkingApi.Models.User", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
