// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingApi.Settings;

namespace ParkingApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210831210042_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ParkingApi.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Full_name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 41, 14, DateTimeKind.Unspecified).AddTicks(6332), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            Full_name = "John Doe",
                            Password = "+Z4l4oyrs0krAHYGJi0R0YLfrN0VXslFl4p5xGcR2fk=",
                            StoredSalt = new byte[] { 44, 106, 55, 86, 92, 107, 92, 49, 225, 13, 200, 33, 202, 9, 99, 111 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefaulte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "green",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 41, 103, DateTimeKind.Unspecified).AddTicks(6558), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = true,
                            Model = "Volga",
                            Number = "AA1234BB",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Color = "red",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 41, 103, DateTimeKind.Unspecified).AddTicks(6596), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDefaulte = false,
                            Model = "Nissan",
                            Number = "AA4321BB",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<long>("ParkingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Latitude = 789.45600000000002,
                            Longitude = 456.78899999999999,
                            ParkingId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Latitude = 789.45600000000002,
                            Longitude = 456.78899999999999,
                            ParkingId = 1L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Parking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<long>("SecondFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("SecondTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "There and here?",
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 41, 62, DateTimeKind.Unspecified).AddTicks(2761), new TimeSpan(0, 3, 0, 0, 0)),
                            Price = 5.4500000000000002,
                            SecondFrom = 123456L,
                            SecondTo = 654321L
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CarId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ParkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("ParkingId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CarId = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 41, 107, DateTimeKind.Unspecified).AddTicks(7395), new TimeSpan(0, 3, 0, 0, 0)),
                            EndTime = new DateTime(2021, 9, 1, 1, 0, 41, 107, DateTimeKind.Local).AddTicks(6851),
                            ParkingId = 1L,
                            StartTime = new DateTime(2021, 9, 1, 0, 0, 41, 107, DateTimeKind.Local).AddTicks(5467)
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("First_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Last_name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 41, 94, DateTimeKind.Unspecified).AddTicks(5477), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "user@gmail.com",
                            First_name = "John",
                            IsAccess = true,
                            Last_name = "Doe",
                            Password = "86H0U0gbLT0fO64VIJFYApp3CXEcZ2RPrk3chE5XCHY=",
                            Phone = "+380994444333",
                            StoredSalt = new byte[] { 186, 121, 65, 167, 195, 56, 147, 18, 52, 179, 1, 219, 63, 162, 242, 17 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Valet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Full_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Jetton")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<byte[]>("StoredSalt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Valets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 41, 40, DateTimeKind.Unspecified).AddTicks(9504), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "valet@gmail.com",
                            Full_name = "Valet Doe",
                            IsAccess = true,
                            Jetton = "123456",
                            Password = "5yZPpMErxV9m70UYhvrZMw5N6Ts2u1fDgcQD0QYUIGM=",
                            Phone = "+380994444333",
                            StoredSalt = new byte[] { 33, 52, 186, 25, 49, 207, 62, 177, 32, 65, 120, 115, 102, 41, 0, 227 }
                        });
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.HasOne("ParkingApi.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkingApi.Models.Location", b =>
                {
                    b.HasOne("ParkingApi.Models.Parking", "Parking")
                        .WithMany("Locations")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("ParkingApi.Models.Session", b =>
                {
                    b.HasOne("ParkingApi.Models.Car", "Car")
                        .WithOne("Session")
                        .HasForeignKey("ParkingApi.Models.Session", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingApi.Models.Parking", "Parking")
                        .WithMany("Sessions")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("ParkingApi.Models.Car", b =>
                {
                    b.Navigation("Session");
                });

            modelBuilder.Entity("ParkingApi.Models.Parking", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ParkingApi.Models.User", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
